// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// K1_D_nu
Eigen::MatrixXd K1_D_nu(int k, Eigen::MatrixXd D, Eigen::MatrixXd Q, NumericVector dim, NumericVector C, NumericVector Y, int jj, int nu);
RcppExport SEXP _tensorMiss_K1_D_nu(SEXP kSEXP, SEXP DSEXP, SEXP QSEXP, SEXP dimSEXP, SEXP CSEXP, SEXP YSEXP, SEXP jjSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_D_nu(k, D, Q, dim, C, Y, jj, nu));
    return rcpp_result_gen;
END_RCPP
}
// K1_Ft_est
Eigen::VectorXd K1_Ft_est(NumericVector x, NumericMatrix A1);
RcppExport SEXP _tensorMiss_K1_Ft_est(SEXP xSEXP, SEXP A1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A1(A1SEXP);
    rcpp_result_gen = Rcpp::wrap(K1_Ft_est(x, A1));
    return rcpp_result_gen;
END_RCPP
}
// K1_cov_est
Eigen::MatrixXd K1_cov_est(NumericVector x, NumericVector dim, const int k);
RcppExport SEXP _tensorMiss_K1_cov_est(SEXP xSEXP, SEXP dimSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_cov_est(x, dim, k));
    return rcpp_result_gen;
END_RCPP
}
// K2_D_nu
Eigen::MatrixXd K2_D_nu(int k, Eigen::MatrixXd D, Eigen::MatrixXd Q, NumericVector dim, NumericVector C, NumericVector Y, int jj, int nu);
RcppExport SEXP _tensorMiss_K2_D_nu(SEXP kSEXP, SEXP DSEXP, SEXP QSEXP, SEXP dimSEXP, SEXP CSEXP, SEXP YSEXP, SEXP jjSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_D_nu(k, D, Q, dim, C, Y, jj, nu));
    return rcpp_result_gen;
END_RCPP
}
// K2_Ft_est
Eigen::VectorXd K2_Ft_est(NumericVector x, NumericMatrix A1, NumericMatrix A2);
RcppExport SEXP _tensorMiss_K2_Ft_est(SEXP xSEXP, SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Ft_est(x, A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// K2_cov_est
Eigen::MatrixXd K2_cov_est(NumericVector x, NumericVector dim, const int k);
RcppExport SEXP _tensorMiss_K2_cov_est(SEXP xSEXP, SEXP dimSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_cov_est(x, dim, k));
    return rcpp_result_gen;
END_RCPP
}
// K3_D_nu
Eigen::MatrixXd K3_D_nu(int k, Eigen::MatrixXd D, Eigen::MatrixXd Q, NumericVector dim, NumericVector C, NumericVector Y, int jj, int nu);
RcppExport SEXP _tensorMiss_K3_D_nu(SEXP kSEXP, SEXP DSEXP, SEXP QSEXP, SEXP dimSEXP, SEXP CSEXP, SEXP YSEXP, SEXP jjSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(K3_D_nu(k, D, Q, dim, C, Y, jj, nu));
    return rcpp_result_gen;
END_RCPP
}
// K3_Ft_est
Eigen::VectorXd K3_Ft_est(NumericVector x, NumericMatrix A1, NumericMatrix A2, NumericMatrix A3);
RcppExport SEXP _tensorMiss_K3_Ft_est(SEXP xSEXP, SEXP A1SEXP, SEXP A2SEXP, SEXP A3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A2(A2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A3(A3SEXP);
    rcpp_result_gen = Rcpp::wrap(K3_Ft_est(x, A1, A2, A3));
    return rcpp_result_gen;
END_RCPP
}
// K3_cov_est
Eigen::MatrixXd K3_cov_est(NumericVector x, NumericVector dim, const int k);
RcppExport SEXP _tensorMiss_K3_cov_est(SEXP xSEXP, SEXP dimSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(K3_cov_est(x, dim, k));
    return rcpp_result_gen;
END_RCPP
}
// data_gen
List data_gen(int K, int n, IntegerVector d, IntegerVector r, IntegerVector re, List eta, NumericVector coef_f, NumericVector coef_fe, NumericVector coef_e, bool heavy_tailed, int t_df, int seed);
RcppExport SEXP _tensorMiss_data_gen(SEXP KSEXP, SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP reSEXP, SEXP etaSEXP, SEXP coef_fSEXP, SEXP coef_feSEXP, SEXP coef_eSEXP, SEXP heavy_tailedSEXP, SEXP t_dfSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type re(reSEXP);
    Rcpp::traits::input_parameter< List >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coef_f(coef_fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coef_fe(coef_feSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coef_e(coef_eSEXP);
    Rcpp::traits::input_parameter< bool >::type heavy_tailed(heavy_tailedSEXP);
    Rcpp::traits::input_parameter< int >::type t_df(t_dfSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(data_gen(K, n, d, r, re, eta, coef_f, coef_fe, coef_e, heavy_tailed, t_df, seed));
    return rcpp_result_gen;
END_RCPP
}
// partition_MSE
double partition_MSE(std::vector<double> x1, std::vector<double> x2, int par_num);
RcppExport SEXP _tensorMiss_partition_MSE(SEXP x1SEXP, SEXP x2SEXP, SEXP par_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< int >::type par_num(par_numSEXP);
    rcpp_result_gen = Rcpp::wrap(partition_MSE(x1, x2, par_num));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tensorMiss_K1_D_nu", (DL_FUNC) &_tensorMiss_K1_D_nu, 8},
    {"_tensorMiss_K1_Ft_est", (DL_FUNC) &_tensorMiss_K1_Ft_est, 2},
    {"_tensorMiss_K1_cov_est", (DL_FUNC) &_tensorMiss_K1_cov_est, 3},
    {"_tensorMiss_K2_D_nu", (DL_FUNC) &_tensorMiss_K2_D_nu, 8},
    {"_tensorMiss_K2_Ft_est", (DL_FUNC) &_tensorMiss_K2_Ft_est, 3},
    {"_tensorMiss_K2_cov_est", (DL_FUNC) &_tensorMiss_K2_cov_est, 3},
    {"_tensorMiss_K3_D_nu", (DL_FUNC) &_tensorMiss_K3_D_nu, 8},
    {"_tensorMiss_K3_Ft_est", (DL_FUNC) &_tensorMiss_K3_Ft_est, 4},
    {"_tensorMiss_K3_cov_est", (DL_FUNC) &_tensorMiss_K3_cov_est, 3},
    {"_tensorMiss_data_gen", (DL_FUNC) &_tensorMiss_data_gen, 12},
    {"_tensorMiss_partition_MSE", (DL_FUNC) &_tensorMiss_partition_MSE, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_tensorMiss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
